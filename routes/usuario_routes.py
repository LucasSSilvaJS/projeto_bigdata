from fastapi import APIRouter, Query, HTTPException
from core.services.usuario_service import UsuarioService
from typing import List, Dict, Any

router = APIRouter(
    prefix="/usuarios", 
    tags=["üë§ Usu√°rios"],
    responses={
        404: {"description": "Usu√°rio n√£o encontrado"},
        422: {"description": "Dados inv√°lidos"}
    }
)
service = UsuarioService()

@router.get("/", 
    summary="Listar todos os usu√°rios",
    description="Retorna uma lista com todos os usu√°rios cadastrados no sistema.",
    response_description="Lista de usu√°rios")
def listar_usuarios():
    """
    ## üìã Listar Todos os Usu√°rios
    
    Retorna uma lista com todos os usu√°rios cadastrados no sistema.
    
    ### Resposta:
    ```json
    [
        {"vem_hash: 123", pontuacao: 10},
        {"vem_hash: 456", pontuacao: 20}
    ]
    ```
    """
    return service.listar_usuarios()

@router.post("/{vem_hash}", 
    summary="Criar novo usu√°rio",
    description="Cria um novo usu√°rio no sistema identificado por um hash √∫nico.",
    response_description="Usu√°rio criado com sucesso")
def criar_usuario(vem_hash: str):
    """
    ## üìù Criar Novo Usu√°rio
    
    Cria um novo usu√°rio no sistema usando um hash √∫nico como identificador.
    
    ### Par√¢metros:
    - **vem_hash** (string): Hash √∫nico do usu√°rio
    
    ### Exemplo de uso:
    ```
    POST /usuarios/?vem_hash=cliente001
    ```
    
    ### Resposta:
    ```json
    {
        "vem_hash": "cliente001",
        "pontuacao": 0
    }
    ```
    """
    #verificar se o usu√°rio j√° existe
    existing_user = service.buscar_usuario(vem_hash)
    if existing_user:
        raise HTTPException(status_code=422, detail="Usu√°rio j√° existe")
    return service.criar_usuario(vem_hash)

@router.get("/{vem_hash}", 
    summary="Buscar usu√°rio por hash",
    description="Busca um usu√°rio espec√≠fico usando seu hash √∫nico.",
    response_description="Dados do usu√°rio encontrado")
def buscar_usuario(vem_hash: str):
    """
    ## üîç Buscar Usu√°rio por Hash
    
    Busca um usu√°rio espec√≠fico no sistema usando seu hash √∫nico.
    
    ### Par√¢metros:
    - **vem_hash** (string): Hash √∫nico do usu√°rio
    
    ### Exemplo de uso:
    ```
    GET /usuarios/user123
    ```
    
    ### Resposta:
    ```json
    {
        "vem_hash": "user123",
        "pontuacao": 30
    }
    ```
    """
    usuario = service.buscar_usuario(vem_hash)
    if not usuario:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    return usuario

@router.delete("/{vem_hash}", 
    summary="Excluir usu√°rio",
    description="Remove um usu√°rio do sistema usando seu hash √∫nico.",
    response_description="Confirma√ß√£o de exclus√£o")
def excluir_usuario(vem_hash: str):
    """
    ## üóëÔ∏è Excluir Usu√°rio
    
    Remove um usu√°rio do sistema usando seu hash √∫nico.
    
    ### Par√¢metros:
    - **vem_hash** (string): Hash √∫nico do usu√°rio
    
    ### Exemplo de uso:
    ```
    DELETE /usuarios/user123
    ```
    
    ### Resposta:
    ```json
    {
        "mensagem": "Usu√°rio removido com sucesso"
    }
    ```
    """
    return service.excluir_usuario(vem_hash)

@router.patch("/{vem_hash}/pontuacao",
    summary="Atualizar pontua√ß√£o do usu√°rio",
    description="Atualiza a pontua√ß√£o de um usu√°rio espec√≠fico.",
    response_description="Pontua√ß√£o atualizada com sucesso")
def atualizar_pontuacao(vem_hash: str, pontos: int = Query(..., description="N√∫mero de pontos a adicionar ou subtrair")):
    """
    ## ‚öôÔ∏è Atualizar Pontua√ß√£o do Usu√°rio
    Atualiza a pontua√ß√£o de um usu√°rio espec√≠fico.

    ### Par√¢metros:
    - **vem_hash** (string): Hash √∫nico do usu√°rio
    - **pontos** (int): N√∫mero de pontos a adicionar (positivo) ou subtrair (negativo)

    ### Exemplo de uso:
    ```
    PATCH /usuarios/user123/pontuacao?pontos=10
    ```
    
    ### Resposta:
    ```json
    {
        "vem_hash": "user123",
        "pontuacao": 40
    }
    ```
    """
    resultado = service.atualizar_pontuacao(vem_hash, pontos)
    if not resultado:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    return resultado
