from fastapi import APIRouter, Query, HTTPException
from core.services.interacao_service import InteracaoService

router = APIRouter(
    prefix="/interacoes",
    tags=["üîÑ Intera√ß√µes"],
    responses={
        404: {"description": "Recurso n√£o encontrado"},
        422: {"description": "Dados inv√°lidos"}
    }
)
service = InteracaoService()

@router.post("/", 
    summary="Registrar nova intera√ß√£o",
    description="Registra uma nova intera√ß√£o de um usu√°rio respondendo uma pergunta em um totem espec√≠fico.",
    response_description="Intera√ß√£o registrada com sucesso")
def criar_interacao(
    vem_hash: str = Query(..., description="Hash √∫nico do usu√°rio", example="user123"),
    pergunta_id: str = Query(..., description="ID da pergunta respondida", example="pergunta001"),
    totem_id: str = Query(..., description="ID do totem onde ocorreu a intera√ß√£o", example="totem001"),
    resposta: str = Query(..., description="Resposta do usu√°rio (sim ou nao)", example="sim")
):
    """
    ## üîÑ Registrar Nova Intera√ß√£o
    
    Registra uma nova intera√ß√£o de um usu√°rio respondendo uma pergunta em um totem espec√≠fico.
    
    ### Par√¢metros:
    - **vem_hash** (string): Hash √∫nico do usu√°rio
    - **pergunta_id** (string): ID da pergunta respondida
    - **totem_id** (string): ID do totem onde ocorreu a intera√ß√£o
    - **resposta** (string): Resposta do usu√°rio ("sim" ou "nao")
    
    ### Exemplo de uso:
    ```
    POST /interacoes/?vem_hash=user123&pergunta_id=pergunta001&totem_id=totem001&resposta=sim
    ```
    
    ### Resposta:
    ```json
    {
        "vem_hash": "user123",
        "pergunta_id": "pergunta001",
        "totem_id": "totem001",
        "resposta": "sim"
    }
    ```
    
    ### Valida√ß√µes:
    - A resposta deve ser exatamente "sim" ou "nao"
    - O usu√°rio, pergunta e totem devem existir no sistema
    """
    try:
        return service.registrar_interacao(vem_hash, pergunta_id, totem_id, resposta)
    except ValueError as e:
        raise HTTPException(status_code=422, detail=str(e))

@router.get("/", 
    summary="Listar todas as intera√ß√µes",
    description="Retorna uma lista com todas as intera√ß√µes registradas no sistema.",
    response_description="Lista de intera√ß√µes")
def listar_interacoes():
    """
    ## üìã Listar Todas as Intera√ß√µes
    
    Retorna uma lista com todas as intera√ß√µes registradas no sistema.
    
    ### Resposta:
    ```json
    [
        {
            "vem_hash": "user123",
            "pergunta_id": "pergunta001",
            "totem_id": "totem001",
            "resposta": "sim"
        }
    ]
    ```
    
    ### Uso para An√°lise:
    Esta lista pode ser usada para:
    - An√°lise de satisfa√ß√£o
    - An√°lise geogr√°fica
    - An√°lise temporal
    - Dashboards de Big Data
    """
    return service.listar_interacoes()

@router.delete("/pergunta/{pergunta_id}", 
    summary="Excluir intera√ß√µes por pergunta",
    description="Remove todas as intera√ß√µes associadas a uma pergunta espec√≠fica.",
    response_description="Intera√ß√µes removidas com sucesso")
def excluir_interacoes_por_pergunta(pergunta_id: str):
    """
    ## üóëÔ∏è Excluir Intera√ß√µes por Pergunta

    Remove todas as intera√ß√µes associadas a uma pergunta espec√≠fica.

    ### Par√¢metros:
    - **pergunta_id** (string): Identificador √∫nico da pergunta

    ### Exemplo de uso:
    ```
    DELETE /interacoes/pergunta/pergunta001
    ```

    ### Resposta:
    ```json
    {
        "mensagem": "Intera√ß√µes removidas com sucesso"
    }
    ```
    """
    try:
        return service.excluir_interacoes_por_pergunta(pergunta_id)
    except ValueError as e:
        raise HTTPException(status_code=422, detail=str(e))

@router.get("/verificar", 
    summary="Verificar intera√ß√£o do usu√°rio",
    description="Verifica se um usu√°rio j√° interagiu com uma pergunta espec√≠fica.",
    response_description="Resultado da verifica√ß√£o")
def verificar_interacao(
    vem_hash: str = Query(..., description="Hash √∫nico do usu√°rio", example="user123"),
    pergunta_id: str = Query(..., description="ID da pergunta", example="pergunta001")
):
    """
    ## ‚úÖ Verificar Intera√ß√£o do Usu√°rio

    Verifica se um usu√°rio j√° interagiu com uma pergunta espec√≠fica.

    ### Par√¢metros:
    - **vem_hash** (string): Hash √∫nico do usu√°rio
    - **pergunta_id** (string): ID da pergunta

    ### Exemplo de uso:
    ```
    GET /interacoes/verificar?vem_hash=user123&pergunta_id=pergunta001
    ```

    ### Resposta:
    ```json
    {
        "interagiu": true
    }
    ```
    """
    try:
        interagiu = service.verificar_interacao(vem_hash, pergunta_id)
        return {"interagiu": interagiu}
    except ValueError as e:
        raise HTTPException(status_code=422, detail=str(e))

@router.get("/score/{pergunta_id}", 
    summary="Obter score de respostas para uma pergunta",
    description="Calcula o percentual de respostas 'sim' e 'nao' para uma pergunta espec√≠fica.",
    response_description="Score de respostas")
def obter_score(pergunta_id: str):
    """
    ## üìä Obter Score de Respostas para uma Pergunta

    Calcula o percentual de respostas 'sim' e 'nao' para uma pergunta espec√≠fica.

    ### Par√¢metros:
    - **pergunta_id** (string): Identificador √∫nico da pergunta

    ### Exemplo de uso:
    ```
    GET /interacoes/score/pergunta001
    ```

    ### Resposta:
    ```json
    {
        "sim": 75.0,
        "nao": 25.0
    }
    ```
    """
    try:
        return service.obter_score(pergunta_id)
    except ValueError as e:
        raise HTTPException(status_code=422, detail=str(e))
